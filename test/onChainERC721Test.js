const { expect } = require("chai");
const { ethers } = require("hardhat");

const fur = [
  {name:'White',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAAD///8AAADfvqfU1NSgoKCyjXMTERDoC1piAAAAAXRSTlMAQObYZgAAARNJREFUKM9VkbGKwzAQRE3+YIzSyxtL19uQfs2a6430AzK4TnX5/RvLTi43DAI9Zge0aqrEi1ykeekimIAe4s97DwdAoe1BegOIVB3aGjBTKHZo8DWQlAHaKdoKZtMrQCumOhGSZcVV0QGeYCqZjG4HRxDsdg9LyXQcO86EZSzldhe6rANbQ9ziOlbd49q3zWWR5QTDIntHym8AKEds/gDYgb2BOxL6kTCWJrR/wLH0P2gJDPEA3dGR9IwMoNiRTSG7OnUKT7ATU+XhTLmykBPXaXCOlBurEVMujSe+GyqQzHSac/J17ST0xFfK4/w5KSJR5GslqGQr2yNu/md8gXV4PuLon88TxHVgamTjKRHZiyr4BfrNU9BDNuzNAAAAAElFTkSuQmCC', weight: 40},
  {name:'Gray',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAACyjXMAAADfvqeUXFl3RkwTERCfc+i4AAAAAXRSTlMAQObYZgAAAQlJREFUKM9V0UGOgzAMBdCKG3yT7mMXZl84gZG5AEr2nU3vf4T5BNppLQuJp58vES5tLJt1dnlNZ1iAAZbP9wEJgMPlkCEAknuCtECEw7FjILdAcQa4ySEN1vArwHUs7cRYojquDgUyYZFK48qUCGPc7uMmlauz8sy4zSK3u3Gln9g6KrSf29y1H+TSbbadMG22d5T6BsCFpesHYId4QzoS/pEIlhbIPySWfoMQAnqAHh3Fz8gEDjtqOGwf9eTIhF3CnY8Uzisba3FPgZSovLEWCeel8QkGGKGs3LLW0qCjcBd+pT3OP2dipmY/PaEJBA9F/p1f0E/Ph875+TxB+4mpmY3nmNle1OAPuP9KNkOoX8MAAAAASUVORK5CYII=', weight: 30},
  {name:'Black',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAABUVFTfvqcnJyeyjXMTERCh6BJhAAAAAXRSTlMAQObYZgAAAQBJREFUKM9V0NFthDAQBFCuAw+x8++RG0DoCvBqG7AQ//cT+i8hYwO5y2pliefZFfI0CgF4YLrrAVYyEuH6jiwkjZZPiU6KzArzCLjrkh2dYQSiKaAuxjygumVSbaxjAtGhS+NMBkFtkKnzUgTwryfQeqd11gywtiZTt23RVqQ9beuoZ9pi1n8DFyxA3xHfQJpGvH4AO/gflDNhHwnX0sj8hqKl/yELnOmE+dwRTZEzoNIOuBG9ZivGIOjiZjqKm54MGrLiLEWqFxsRNz2aTk2oIKnqWBEFPTKqRh2v6ZIGJOB7EwzZ2/5Ke/hZb9iW45XWcBwXpG1Rag3TXQD6ogG/hxdGus2GU1IAAAAASUVORK5CYII=', weight: 15},
  {name:'Survivor',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAG1BMVEUAAAAAAADfvqf////U1NSgoKDaPDayjXMTERC+6f+SAAAAAXRSTlMAQObYZgAAARFJREFUKM9dzjGOwjAQBVDnBh6I19smDXX0Az2agT5SfIAIyb3TpKVbjr1jJwGJr2n89GdkU0KWqCKzpyJcgRpkt3eNHgCDu1VqAZSYe3SlIMJgZBTYUhhZCzo9oytwEz4DOoxr2XCjBMaZcQSswjUFNZ2u6RWcHE5uSEHHt0fdcUOb0uFEOmlu9Krzi5/bkpOf685UAw0bNAPlG2N4A3DXFbl94PKYFOQNlxgz8BumH5pMNaLbwVYmH/2A0SjINzD8ClSgCsJaKTc3UKGSaNedMDL38sifsHtFWDjGXZzKLdxjzlpRcSFOWqCnKUKUiDzR76xQZEnL0y/2r91hbl5P39rXawM/N9pqrdlDRPlQgX8Br1cKW3BhdQAAAABJRU5ErkJggg==', weight: 15}
]

const head = [
  {name:'Beanie',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADesC8AAACygyzig7/6AAAAAXRSTlMAQObYZgAAADRJREFUGNNjYGBYtWrVCgYgYPoaGhqGg7EKCEAM7qtfa+MbgAz98Kvx4Q8wGXA1cF1DGwAAvHUdFaOI7ngAAAAASUVORK5CYII=', weight: 30},
  {name:'Blue Hat',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAxfAUPVwwY9MkUpn///8Xb+CzKPBIAAAAAXRSTlMAQObYZgAAAExJREFUKM9jAAElCFBggAImQ0EgCA0UggmoGAuCQaACmoAoXMBZEAIQAsYIAYQlCGuY3KA6hKECKolQASOoAhdnYwiA6YAbwTAK6AQA8i0NMLnMBUEAAAAASUVORK5CYII=', weight: 30},
  {name:'Rainbow Fro',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAAAki0gAxfDp4iWtKZWxHRj6e/wSAAAAAXRSTlMAQObYZgAAAG1JREFUKM/tjs0NgDAIRmED8Kd3cQJDHKCGBXroBsb9R9C2Vk28e/KFCy98AGSYmJGhgmxepFWms3dmi4jqHIpxq5mIjKox5IHtFpHSwFOEl8iRa2mfI8Bo1qSzEwYodB5lQCWg+hkBHwU/H7ED9CEVeXhOdWcAAAAASUVORK5CYII=', weight: 20},
  {name:'Visor',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAAAAAAAxfD///9RzuowY9OA/ye6AAAAAXRSTlMAQObYZgAAAC1JREFUKM9joBIQhAEBqICIszEE4BJgRNciGqQEAYpQBaFKUCCAbgnDKKATAADXjwhxIw22hAAAAABJRU5ErkJggg==', weight: 20}
]

const ears = [
  {name:'None',png:'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=', weight: 25},
  {name:'Diamond Bling',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAxfCf3fkiSJbrAAAAAXRSTlMAQObYZgAAACNJREFUGNNjoCtwABEsDAyME0AMSQYGthQQI80BJoJQM0gAANAXAu1JLL1KAAAAAElFTkSuQmCC', weight: 25},
  {name:'Gold Hoop',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADesC/p4iWygywWMD4DAAAAAXRSTlMAQObYZgAAAC1JREFUGNNjoAdoABEcDAxMYJ4CkGEAYigDGQIghiIDAyOYIQjEDiAGC8MgAQALcAGZnwuuxQAAAABJRU5ErkJggg==', weight: 25},
  {name:'STwo Gold Piercings',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAADp4iXesC+/0+PiAAAAAXRSTlMAQObYZgAAABpJREFUGNNjoANgFACRggwMTAoghhJCZPADAF5gAImSV/7gAAAAAElFTkSuQmCC', weight: 25}
]

const eyes = [
  {name:'Angry',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABRJREFUCNdjIBcIOAAJjgYkLk0AAG9gASkMl47GAAAAAElFTkSuQmCC', weight: 30},
  {name:'Happy',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABRJREFUCNdjoAgYJAAJjwkQgiYAAM74AkGPa/xKAAAAAElFTkSuQmCC', weight: 30},
  {name:'Rainbow Sunnies',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAKlBMVEUAAAD////p4iWRy2kkUpmtKZUlrjsAxfAwY9O6Rp3esC/aPDaGIiexHRjD61CUAAAAAXRSTlMAQObYZgAAADFJREFUKM9jGNqA5/YiIbPkCpFIuMguRWUG80ZXhBKgAgZkBQyMygkMjK4TGEYBEQAAmnoIPpGtZsYAAAAASUVORK5CYII=', weight: 20},
  {name:'Cyclops',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAAB1JREFUGNNjoCkIdYDQjKsmQBhsy5bARRBqBjEAAGQRBPHyQj4NAAAAAElFTkSuQmCC', weight: 20}
]

const nose = [
  {name:'Normal',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABFJREFUCNdjoDpgBRFM1DINAAK4AAgZ7pXcAAAAAElFTkSuQmCC', weight: 40},
  {name:'Triangle',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABVJREFUCNdjoCZgAhHsIIK/gUpGAgArrwCZZLzKJAAAAABJRU5ErkJggg==', weight: 20},
  {name:'Wide',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAACyjXMCmAU+AAAAAXRSTlMAQObYZgAAABNJREFUGNNjGIRAEMZIc2AYaAAAXx4AuAHt6rEAAAAASUVORK5CYII=', weight: 20},
  {name:'X',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAnJycAAABUVFTztD9wAAAAAXRSTlMAQObYZgAAABVJREFUGNNjGDyABcbQhTE4GAYcAAAgKAA6oPTpgwAAAABJRU5ErkJggg==', weight: 20}
]

const mouth = [
  {name:'Big Smile',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAACBJREFUGNNjGFKANTTUAcxgW7UKwmBctRIqFxrCQAMAAMVABIfzxX3aAAAAAElFTkSuQmCC', weight: 40},
  {name:'Cigarette',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD////ft1JteCeNAAAAAXRSTlMAQObYZgAAABVJREFUGNNjGAogNADKeLUEIUIfAABEGwLZXNgLagAAAABJRU5ErkJggg==', weight: 20},
  {name:'Grillz',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD////p4iVEM/MhAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGFKANTQUwmB7tRPCYNz1BMoIDWGgAQAAy/oEopz4M1EAAAAASUVORK5CYII=', weight: 20},
  {name:'Missing Tooth',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD///+LK2OK52TNAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGFKANTQUwmBbvRLCYFy1BCoXGsBAAwAAjNcD/iN6+sgAAAAASUVORK5CYII=', weight: 20}
]

const feet = [
  {name:'Blue Sneakers',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAkUpn///8UPVxkGBcRAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGLGAF0Rw9TMtUAXzHJgDwMKqDpwBSKoARRECzKMjW7YAAAAASUVORK5CYII=', weight: 40},
  {name:'Elf',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAACxHRiGIicAAAATERAFVo93AAAAAXRSTlMAQObYZgAAADZJREFUKM9jGAXDDAgwMDABKUUIz5hBUUDZgEmQRUkQImBkoCjALMwkCFfPLCgowGAoKIjdNAB7PwJ5dZ0C2wAAAABJRU5ErkJggg==', weight: 20},
  {name:'Frozen',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAxfCf3fkAAAAF6gJPAAAAAXRSTlMAQObYZgAAACRJREFUGNNjGJnAgZGBDUSzujIGSIEY1xpMF4BlpBrYFiApBABjtARoNgJwbQAAAABJRU5ErkJggg==', weight: 20},
  {name:'Snowboard',png:'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAAAxfCIUzjXAAAAAXRSTlMAQObYZgAAACRJREFUGNNjGMlABEZJhgawhjCGpjCwrXLgamBaNYGBMRQMHABaSgbvYKSrowAAAABJRU5ErkJggg==', weight: 20}
]

describe('On-chain ERC721', function () {
  const name = 'My new on-chain NFT project';
  const symbol = 'GOAT';
  const MAX_MINT_PER_ADDRESS = 2;
  const MAX_SUPPLY = 8888;
  const MINT_PRICE = 0.1; //in ether
  const MINT_PRICE_WEI = ethers.utils.parseEther(MINT_PRICE.toString());
  const BASE_URI = 'ipfs://cid/'

  beforeEach(async function () {

    //traits contract
    traits = await ethers.getContractFactory('Traits');

    //minting contract
    contract = await ethers.getContractFactory('OnChainERC721');

    provider = await ethers.provider;

    [owner, user, ...address] = await ethers.getSigners();

    traits = await traits.deploy();
      
    contract = await contract.deploy(name, symbol, MAX_MINT_PER_ADDRESS, MAX_SUPPLY, MINT_PRICE_WEI, traits.address);

    await traits.transferOwnership(contract.address);

    await contract.uploadTraits(0,[0,1,2,3], fur);
    await contract.uploadTraits(1,[0,1,2,3], head);
    await contract.uploadTraits(2,[0,1,2,3], ears);
    await contract.uploadTraits(3,[0,1,2,3], eyes);
    await contract.uploadTraits(4,[0,1,2,3], nose);
    await contract.uploadTraits(5,[0,1,2,3], mouth);
    await contract.uploadTraits(6,[0,1,2,3], feet);
  });

  describe('Deployment', function() {
    it('Should check everything is deployed sucessfully', async function() {
      expect(await contract.name()).to.equal(name);
      expect(await contract.symbol()).to.equal(symbol);
      expect(await contract.SALE_OPEN()).to.equal(false);
      expect(await contract.MAX_MINT_PER_ADDRESS()).to.equal(MAX_MINT_PER_ADDRESS);
      expect(await contract.MAX_SUPPLY()).to.equal(MAX_SUPPLY);
      expect(await contract.totalSupply()).to.equal(0);
      expect(await contract.MINT_PRICE()).to.equal(MINT_PRICE_WEI);
    });
  });
  describe('Minting', function() {
    it('Should be able to switch sale status', async function() {
      expect(await contract.SALE_OPEN()).to.equal(false);
      await contract.switchSaleStatus();
      expect(await contract.SALE_OPEN()).to.equal(true);
      await contract.switchSaleStatus();
      expect(await contract.SALE_OPEN()).to.equal(false);
    });
    it('Should be able to mint one token', async function() {
      await contract.switchSaleStatus();
      await contract.mint({value: MINT_PRICE_WEI});
      expect(await contract.totalSupply()).to.equal(1);
      expect(await contract.mintedAmountByAddress(owner.address)).to.equal(1);
      expect(await contract.ownerOf(1)).to.equal(owner.address);
    });
    it('Should be able to transfer token', async function() {
      await contract.switchSaleStatus();
      await contract.mint({value: MINT_PRICE_WEI});
      await contract.transferFrom(owner.address, user.address, 1);
      expect(await contract.totalSupply()).to.equal(1);
      expect(await contract.ownerOf(1)).to.equal(user.address);
    });
    it('Should be able to mint more tokens from the same address ', async function() {
      await contract.switchSaleStatus();
      for (let i = 0; i<2;i++){
        await contract.mint({value: MINT_PRICE_WEI});
      }
      expect(await contract.totalSupply()).to.equal(2);
      expect(await contract.mintedAmountByAddress(owner.address)).to.equal(2);
      expect(await contract.ownerOf(1)).to.equal(owner.address);
      expect(await contract.ownerOf(2)).to.equal(owner.address);
    });
  });
  describe('Handeling metadata', function() {
    it('Should be able to get tokenURI', async function() {
      await contract.switchSaleStatus();
      await contract.mint({value: MINT_PRICE_WEI});
      await contract.mint({value: MINT_PRICE_WEI});
      await contract.mint({value: MINT_PRICE_WEI});
      await contract.mint({value: MINT_PRICE_WEI});
      console.log(await contract.tokenURI(1));
      //expect(await contract.tokenURI(1)).to.equal('data:application/json;base64,eyJuYW1lIjogIkFuaW1hbCAjMSIsICJkZXNjcmlwdGlvbiI6ICJDb2xsZXRpb24gb2YgRVJDNzIxIHRva2VucyB3aXRoIGZ1bGx5IG9uLWNoYWluIG1ldGFkYXRhLiIsICJpbWFnZSI6ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUJwWkQwaVlXNXBiV0ZzSWlCM2FXUjBhRDBpTVRBd0pTSWdhR1ZwWjJoMFBTSXhNREFsSWlCMlpYSnphVzl1UFNJeExqRWlJSFpwWlhkQ2IzZzlJakFnTUNBME1DQTBNQ0lnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JaUI0Yld4dWN6cDRiR2x1YXowaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1UazVPUzk0YkdsdWF5SStQR2x0WVdkbElIZzlJalFpSUhrOUlqUWlJSGRwWkhSb1BTSXpNaUlnYUdWcFoyaDBQU0l6TWlJZ2FXMWhaMlV0Y21WdVpHVnlhVzVuUFNKd2FYaGxiR0YwWldRaUlIQnlaWE5sY25abFFYTndaV04wVW1GMGFXODlJbmhOYVdSWlRXbGtJaUI0YkdsdWF6cG9jbVZtUFNKa1lYUmhPbWx0WVdkbEwzQnVaenRpWVhObE5qUXNhVlpDVDFKM01FdEhaMjlCUVVGQlRsTlZhRVZWWjBGQlFVTkJRVUZCUVdkQ1FVMUJRVUZEUWxaSFpraEJRVUZCUjBaQ1RWWkZWVUZCUVVRdkx5ODRRVUZCUkdaMmNXWlZNVTVUWjI5TFEzbHFXRTFVUlZKRWIwTXhjR2xCUVVGQlFWaFNVMVJzVFVGUlQySlpXbWRCUVVGU1RrcFNSVVpWUzAwNVZtdGlSMHQzZWtGUlVrVXpLMWxKZWxONWVIUk1NVGwxVVdaek1tRTJORE13UVhwTE5GUnVXRFV2VW5aTVZHazBNMFJCU1RsYVoyVXdZWEZ5UldreGVXdGxaV3RwYlVsQlpUUnpPVGRFZDJSQmIyVXhRbVZuVDBsV1FqTmhSMnBDVkV0SVdtODRSRmRSYkVGSVlVdGtiMHRhZEUxeVVVTjFiVTlvUjFOYVkxWldNRkZIWlZsRGNWcHFSelJJVW5oRWMyUm5PVXg1V0ZGalR6ZzJSVnBUZW14a2FHVTJja0ZPWWxFNWVtbFBiR0prTkRseE0zcFhWMUkxVVZSRVNXNTBTSGx0T0VGTFJXUnpMMmRFV1dkaU1rSlBlRXcyYTFSRFYwcHlVaTkzVEVnd1VESm5Ta1JRUlVFelpFZFNPVWwzVFc5T2FWSlVVMGMzVDI1VlMxUTNRVlJWSzFob1ZFeHRlV3RDVUZoaFdFTlBiRUoxY2tWV1RYVnFVMlVyUjNseFVYcElVMkZqTDBveE4xTlVNSGhHWmtzMEwzYzFTMU5LVWpWSGMyeHhSMUZ5TW5sT2RTOXRaRGhuV0ZZMFVIVk1iMjQ0T0ZSNFNGWm5ZVzFVYWt0U1NGcHBlWEkwUW1aeVRsVTVRa1JPZFhwT1FVRkJRVUZGYkVaVWExTjFVVzFEUXlJdlBqeHBiV0ZuWlNCNFBTSTBJaUI1UFNJMElpQjNhV1IwYUQwaU16SWlJR2hsYVdkb2REMGlNeklpSUdsdFlXZGxMWEpsYm1SbGNtbHVaejBpY0dsNFpXeGhkR1ZrSWlCd2NtVnpaWEoyWlVGemNHVmpkRkpoZEdsdlBTSjRUV2xrV1UxcFpDSWdlR3hwYm1zNmFISmxaajBpWkdGMFlUcHBiV0ZuWlM5d2JtYzdZbUZ6WlRZMExHbFdRazlTZHpCTFIyZHZRVUZCUVU1VFZXaEZWV2RCUVVGRFFVRkJRVUZuUVdkTlFVRkJRVTlHU2twdVFVRkJRVVJHUWsxV1JWVkJRVUZFWlhORE9FRkJRVU41WjNsNmFXYzNMelpCUVVGQlFWaFNVMVJzVFVGUlQySlpXbWRCUVVGRVVrcFNSVVpWUjA1T2FsbEhRbGwwVjNKV1EyZFpaMWxRYjJGSGFIRkhaemRGUzBORlFVMDNjWFJtWVN0TlltZEJlams0UzNaNE5GRTRkMGRZUVRGalJqRkVSM2RCUVhaSVZXUkdZVTlKTjI1blFVRkJRVUZUVlZaUFVrczFRMWxKU1QwaUx6NDhhVzFoWjJVZ2VEMGlOQ0lnZVQwaU5DSWdkMmxrZEdnOUlqTXlJaUJvWldsbmFIUTlJak15SWlCcGJXRm5aUzF5Wlc1a1pYSnBibWM5SW5CcGVHVnNZWFJsWkNJZ2NISmxjMlZ5ZG1WQmMzQmxZM1JTWVhScGJ6MGllRTFwWkZsTmFXUWlJSGhzYVc1ck9taHlaV1k5SW1SaGRHRTZhVzFoWjJVdmNHNW5PMkpoYzJVMk5DeHBWa0pQVW5jd1MwZG5iMEZCUVVGT1UxVm9SVlZuUVVGQlFVVkJRVUZCUWtOQlVVRkJRVU14U0VGM1EwRkJRVUZETUd4RlVWWlNOREp0VG10WlFVRkJRVUZaUVVGcVEwSXdRemhCUVVGQlFWTlZWazlTU3pWRFdVbEpQU0l2UGp4cGJXRm5aU0I0UFNJMElpQjVQU0kwSWlCM2FXUjBhRDBpTXpJaUlHaGxhV2RvZEQwaU16SWlJR2x0WVdkbExYSmxibVJsY21sdVp6MGljR2w0Wld4aGRHVmtJaUJ3Y21WelpYSjJaVUZ6Y0dWamRGSmhkR2x2UFNKNFRXbGtXVTFwWkNJZ2VHeHBibXM2YUhKbFpqMGlaR0YwWVRwcGJXRm5aUzl3Ym1jN1ltRnpaVFkwTEdsV1FrOVNkekJMUjJkdlFVRkJRVTVUVldoRlZXZEJRVUZEUVVGQlFVRm5RVkZOUVVGQlFrcDBUMmt6UVVGQlFVSnNRazFXUlZWQlFVRkJRVUZCUTJ4YU4yNVFRVUZCUVVGWVVsTlViRTFCVVU5aVdWcG5RVUZCUWxKS1VrVkdWVU5PWkdwSlFtTkpUMEZCU21wbldXdE1hekJCUVVjNVowRlRhMDFzTkRkSFFVRkJRVUZGYkVaVWExTjFVVzFEUXlJdlBqeHBiV0ZuWlNCNFBTSTBJaUI1UFNJMElpQjNhV1IwYUQwaU16SWlJR2hsYVdkb2REMGlNeklpSUdsdFlXZGxMWEpsYm1SbGNtbHVaejBpY0dsNFpXeGhkR1ZrSWlCd2NtVnpaWEoyWlVGemNHVmpkRkpoZEdsdlBTSjRUV2xrV1UxcFpDSWdlR3hwYm1zNmFISmxaajBpWkdGMFlUcHBiV0ZuWlM5d2JtYzdZbUZ6WlRZMExHbFdRazlTZHpCTFIyZHZRVUZCUVU1VFZXaEZWV2RCUVVGRFFVRkJRVUZuUVZGTlFVRkJRa3AwVDJrelFVRkJRVUpzUWsxV1JWVkJRVUZCUVVGQlEyeGFOMjVRUVVGQlFVRllVbE5VYkUxQlVVOWlXVnBuUVVGQlFrWktVa1ZHVlVOT1pHcHZSSEJuUWxKR1RURkVTVTVCUVVzMFFVRm5XamR3V0dOQlFVRkJRVVZzUmxSclUzVlJiVU5ESWk4K1BHbHRZV2RsSUhnOUlqUWlJSGs5SWpRaUlIZHBaSFJvUFNJek1pSWdhR1ZwWjJoMFBTSXpNaUlnYVcxaFoyVXRjbVZ1WkdWeWFXNW5QU0p3YVhobGJHRjBaV1FpSUhCeVpYTmxjblpsUVhOd1pXTjBVbUYwYVc4OUluaE5hV1JaVFdsa0lpQjRiR2x1YXpwb2NtVm1QU0prWVhSaE9tbHRZV2RsTDNCdVp6dGlZWE5sTmpRc2FWWkNUMUozTUV0SFoyOUJRVUZCVGxOVmFFVlZaMEZCUVVOQlFVRkJRV2RCWjAxQlFVRkJUMFpLU201QlFVRkJRMVpDVFZaRlZVRkJRVUZCUVVGRUx5OHZLMFF6WXk5VFFVRkJRVUZZVWxOVWJFMUJVVTlpV1ZwblFVRkJRMEpLVWtWR1ZVZE9UbXBIUmt0QlRsUlVWVUZqZUdkWE4xVkxkMjFDWTNSU1NYRkdlSEpEVVVGTlFVRk5Wa0ZDU1daNmVGZ3pZVUZCUVVGQlJXeEdWR3RUZFZGdFEwTWlMejQ4YVcxaFoyVWdlRDBpTkNJZ2VUMGlOQ0lnZDJsa2RHZzlJak15SWlCb1pXbG5hSFE5SWpNeUlpQnBiV0ZuWlMxeVpXNWtaWEpwYm1jOUluQnBlR1ZzWVhSbFpDSWdjSEpsYzJWeWRtVkJjM0JsWTNSU1lYUnBiejBpZUUxcFpGbE5hV1FpSUhoc2FXNXJPbWh5WldZOUltUmhkR0U2YVcxaFoyVXZjRzVuTzJKaGMyVTJOQ3hwVmtKUFVuY3dTMGRuYjBGQlFVRk9VMVZvUlZWblFVRkJRMEZCUVVGQlowRm5UVUZCUVVGUFJrcEtia0ZCUVVGRVJrSk5Wa1ZWUVVGQlFXdFZjRzR2THk4NFZWQldlR3RIUW1OU1FVRkJRVUZZVWxOVWJFMUJVVTlpV1ZwblFVRkJRamxLVWtWR1ZVZE9UbXBIVEVkQlJqQlNkemxVVFhSVlFWaDZTRXBuUkhkTlMzRkVjSGRDVTB0dlFWSlNSVU42UzAxcVZ6ZFpRVUZCUVVGVFZWWlBVa3MxUTFsSlNUMGlMejQ4TDNOMlp6ND0iLCAiYXR0cmlidXRlcyI6W3sidHJhaXRfdHlwZSI6IkZ1ciIsInZhbHVlIjoiV2hpdGUifSx7InRyYWl0X3R5cGUiOiJIZWFkIiwidmFsdWUiOiJCZWFuaWUifSx7InRyYWl0X3R5cGUiOiJFYXJzIiwidmFsdWUiOiJOb25lIn0seyJ0cmFpdF90eXBlIjoiRXllcyIsInZhbHVlIjoiQW5ncnkifSx7InRyYWl0X3R5cGUiOiJOb3NlIiwidmFsdWUiOiJOb3JtYWwifSx7InRyYWl0X3R5cGUiOiJNb3V0aCIsInZhbHVlIjoiQmlnIFNtaWxlIn0seyJ0cmFpdF90eXBlIjoiRmVldCIsInZhbHVlIjoiQmx1ZSBTbmVha2VycyJ9LF19');
    });
  });
  describe('Withdrawing', function() {
    it('Should be able to withdraw funds', async function() {
      await contract.switchSaleStatus();
      await contract.mint({value: MINT_PRICE_WEI});
      expect(await provider.getBalance(contract.address)).to.equal(MINT_PRICE_WEI);
      await contract.withdraw();
      expect(await provider.getBalance(contract.address)).to.equal(0);
    });
  });
});
